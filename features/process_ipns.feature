Feature: Process IPNs
  As a developer
  I want to make sure that the IPNs communicated back-and-forth between PayPal and our PayPal application client (app)
  are managed by the PayPal IPN Processor (PIP) to be reliably transmitted and not lost or corrupted
  So that resulting bugs caused by IPN transmission error are eliminated or stopped

  # "Sunny day" scenarios:
  Scenario: PayPal sends IPN
    Given that PayPal, the PIP, and the app have been linked together
    When PayPal sends an IPN to the PIP
    Then the PIP immediately acknowledges success on the send
    And it queues the received IPN to be sent back to PayPal

  Scenario: PIP sends IPN back to PayPal for a successful verification
    Given that PIP has at least one IPN in its queue to be acknowledged
    When the PIP sends the IPN back to PayPal for acknowledgement
    Then PayPal replies that the IPN is verified
    And the PIP queues the IPN to be transmitted to the app

  Scenario: App receives IPN from PIP
    Given that the PIP has at least one IPN that has been verified in its queue to be sent to the app
    When the PIP completes acknowledgement verification for that IPN
    Then the PIP sends the IPN to the app
    And the app receives the IPN

  # Performance optimizations to prevent bottle-necking
  Scenario: PIP sends acknowledgement requests to PayPal in parallel in any order
    Given that PayPal has 50 IPNs to send to the PIP
    When the PIP receives an IPN
    Then it delegates the PIP to a separate process for handling
    And it can quickly respond to the next IPN request from PayPal.
    And the separate processes can send acknowledgement requests to PayPal in any order

  Scenario: IPNs for a given subscription are sent to the app in sequential order
    Given that PayPal has a create payment and a recurring payment for the same subscription in a batch of 50 IPNs
    When the PIP receives the create payment IPN
    Then it delegates it to a separate process for transmitting to the app.
    When it receives the recurring payment IPN
    Then it delegates it to the same process which handles its requests sequentially
    And the app will receive the create payment IPN
    And then the app will receive the recurring payment IPN

  Scenario: IPNs belonging to different subscriptions are sent to the app in parallel in any order
    Given that PayPal has two create payment IPNs for different subscriptions
    When the PIP receives the first create payment IPN
    Then it delegates the IPN to a separate process to handle acknowledgement by PayPal
    When it receives the second payment IPN
    Then it delegates the 2nd IPN to a different process
    When the 2nd IPN's PayPal acknowledgement is processed before the 1st's
    Then the PIP delegates sending the 2nd IPN to the app in a separate process
    When the 1st IPN's PayPal acknowledgement is processed
    Then the PIP delegates sending the 1st IPN to the app in a still different process

  # Verification boundary condition checks:
  Scenario: PIP throws away IPN generated by hacker that PayPal said was invalid
    Given that the PIP has at least one IPN in its queue to be acknowledged
    And it was received by a hacker who sent it attempting to hack the sysytem
    When the PIP sends the IPN back to PayPal for acknowledgement
    Then PayPal replies that the IPN is invalid
    And the PIP logs the rogue IPN
    And it notifies the development team indicating that it received a rogue IPN

  Scenario: PIP acknowledgement request to PayPal times out
    Given that the PIP has at least one IPN in its queue to be acknowledged
    When the PIP sends the IPN back to PayPal for acknowledgement
    And PayPal never responds at all
    Then the PIP times out on that request
    And it logs the request as a warning
    And reissues the request

  Scenario: PayPal times out every time on a IPN acknowledgement request
    Given that the PIP has at least one IPN in its queue to be acknowledged
    When PayPal fails to respond after 3 acknowledgement requests
    Then the PIP logs the IPN that PayPal won't process as an error
    And it flags that subsequent IPNs for this IPN's subscription must be identified to be processed later
    And it notifies the development team that PayPal is unable to process acknowledgements for this IPN.

  Scenario: IPN received for subscription having a previous IPN that failed to be acknowledged
    Given that the PIP was unable to process an IPN
    When the PIP receives a new IPN in the same subscription as the previous IPN
    Then it notifies the development team that an IPN cannot be processed because a previous IPN in the subscription failed ack
    And it processes a PayPal acknowledgment
    But it does not transmit the IPN to the app

  Scenario: App replies internal error when the PIP attempts to send an IPN to it
    Given that the PIP has at least one IPN that has been verified in its queue to be sent to the app
    When the PIP sends the IPN to the app
    And the app replies with an internal error
    Then the PIP logs the IPN that the app won't process
    And it notifies the development team that the app is unable to process this IPN

  Scenario: App times out when the PIP attempts to send an IPN to it
    Given that the PIP has at least one IPN that has been verified in its queue to be sent to the app
    When the PIP sends the IPN to the app
    And the app never responds at all
    Then the PIP times out the request
    And it logs the IPN that the app won't process as an error
    And it notifies the development team that the app is timing out on processing an incoming IPN
